generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"] // "linux-musl-arm64-openssl-3.0.x" remplacé par "debian-openssl-1.1.x" dû à une erreur prisma client
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product_Category {
  id_product_category Int                       @id @default(autoincrement())
  name                String                    @unique
  Product_Category_Product Product_Category_Product[]
}

model Person {
  uuid     Int      @id @default(autoincrement())
  pseudo   String   @unique
  email    String   @unique
  password String
  Admin    Admin?
  Customer Customer?
}

model Admin {
  id_admin Int     @id @default(autoincrement())
  uuid     Int     @unique
  Person   Person  @relation(fields: [uuid], references: [uuid])
  Customer Customer[]
  Admin_Product Admin_Product[]
  ManageAsAdmin Manage[] @relation("ManageAdmin")
  ManageOtherAdmin Manage[] @relation("ManageOtherAdmin")
}


model Customer {
  uuid        Int      @id
  weight      Int
  height      Int
  gender      String
  birth_date  String
  id_admin    Int?
  Person      Person   @relation(fields: [uuid], references: [uuid])
  Admin       Admin?   @relation(fields: [id_admin], references: [id_admin])
  Product     Product[]
  Target      Target?
  Daily_Consumption Daily_Consumption?
}

model Product {
  id_product     Int     @id @default(autoincrement())
  name           String
  brand          String?
  weight         Float?
  kcal           Int
  carbohydrates  Float?
  lipids         Float?
  proteins       Float?
  uuid           Int?
  Customer       Customer? @relation(fields: [uuid], references: [uuid])
  Meal_Product   Meal_Product[]
  Product_Category_Product Product_Category_Product[]
  Admin_Product Admin_Product[]
}

model Target {
  id_target        Int     @id @default(autoincrement())
  name             String
  target_type      String
  weight_target    Int
  start_date       DateTime 
  end_date         DateTime 
  daily_kcal_target Int?
  uuid             Int      @unique
  Customer         Customer @relation(fields: [uuid], references: [uuid])
}

model Daily_Consumption {
  id_daily_consumption Int     @id @default(autoincrement())
  kcal_quantity        Int?
  uuid                 Int     @unique
  Customer             Customer @relation(fields: [uuid], references: [uuid])
  Meal                 Meal[]
}

model Meal {
  id_meal              Int     @id @default(autoincrement())
  title                String?
  meal_time            DateTime
  id_daily_consumption Int
  Daily_Consumption    Daily_Consumption @relation(fields: [id_daily_consumption], references: [id_daily_consumption])
  Meal_Product         Meal_Product[]
}

model Meal_Product {
  id_product       Int
  id_meal          Int
  product_quantity Float
  unit             String?
  Product          Product @relation(fields: [id_product], references: [id_product])
  Meal             Meal    @relation(fields: [id_meal], references: [id_meal])
  @@id([id_product, id_meal])
}

model Product_Category_Product {
  id_product          Int
  id_product_category Int
  Product             Product @relation(fields: [id_product], references: [id_product])
  Product_Category    Product_Category @relation(fields: [id_product_category], references: [id_product_category])
  @@id([id_product, id_product_category])
}

model Admin_Product {
  id_product  Int
  id_admin    Int
  Product     Product @relation(fields: [id_product], references: [id_product])
  Admin       Admin   @relation(fields: [id_admin], references: [id_admin])
  @@id([id_product, id_admin])
}

model Manage {
  id_admin        Int
  id_admin_other  Int
  permission      Boolean
  Admin           Admin   @relation("ManageAdmin", fields: [id_admin], references: [id_admin])
  OtherAdmin      Admin   @relation("ManageOtherAdmin", fields: [id_admin_other], references: [id_admin])
  @@id([id_admin, id_admin_other])
}

